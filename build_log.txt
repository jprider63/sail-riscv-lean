✔ [2/100] Built LeanRV64D.Sail.IntRange
✔ [3/100] Built LeanRV64D.Sail.BitVec
✔ [4/100] Built LeanRV64D.Sail.Sail
✔ [5/100] Built LeanRV64D.Defs
✔ [6/100] Built LeanRV64D.FakeReal
✔ [7/100] Built LeanRV64D.RiscvExtras
✔ [8/100] Built LeanRV64D.Specialization
✔ [9/100] Built LeanRV64D.Option
✔ [10/100] Built LeanRV64D.Flow
✔ [11/100] Built LeanRV64D.Arith
✔ [12/100] Built LeanRV64D.String
✔ [13/100] Built LeanRV64D.Mapping
✔ [14/100] Built LeanRV64D.Vector
✔ [15/100] Built LeanRV64D.HexBits
✔ [16/100] Built LeanRV64D.HexBitsSigned
✔ [17/100] Built LeanRV64D.DecBits
✔ [18/100] Built LeanRV64D.Prelude
✔ [19/100] Built LeanRV64D.RiscvErrors
✔ [20/100] Built LeanRV64D.RiscvXlen
✔ [21/100] Built LeanRV64D.RiscvFlen
✔ [22/100] Built LeanRV64D.RiscvVlen
✔ [23/100] Built LeanRV64D.PreludeMemAddrtype
✔ [24/100] Built LeanRV64D.PreludeMemMetadata
✔ [25/100] Built LeanRV64D.Result
✔ [26/100] Built LeanRV64D.Common
✔ [27/100] Built LeanRV64D.ReadWrite
✔ [28/100] Built LeanRV64D.PreludeMem
✔ [29/100] Built LeanRV64D.Arithmetic
✔ [30/100] Built LeanRV64D.RiscvExtensions
✔ [31/100] Built LeanRV64D.RiscvTypesExt
✔ [32/100] Built LeanRV64D.RiscvTypes
✔ [33/100] Built LeanRV64D.RiscvVmemTypes
✔ [34/100] Built LeanRV64D.RiscvRegType
✔ [35/100] Built LeanRV64D.RiscvFregType
✔ [36/100] Built LeanRV64D.RiscvRegs
✔ [37/100] Built LeanRV64D.RiscvPcAccess
✔ [38/100] Built LeanRV64D.RiscvSysRegs
✔ [39/100] Built LeanRV64D.RiscvPmpRegs
✔ [40/100] Built LeanRV64D.RiscvPmpControl
✔ [41/100] Built LeanRV64D.RiscvExtRegs
✔ [42/100] Built LeanRV64D.RiscvAddrChecks
✔ [43/100] Built LeanRV64D.RiscvVregType
✔ [44/100] Built LeanRV64D.RiscvVextRegs
✔ [45/100] Built LeanRV64D.RiscvVextControl
✔ [46/100] Built LeanRV64D.RiscvSysExceptions
✔ [47/100] Built LeanRV64D.RiscvZihpm
✔ [48/100] Built LeanRV64D.RiscvSscofpmf
✔ [49/100] Built LeanRV64D.RiscvZkrControl
✔ [50/100] Built LeanRV64D.RiscvSoftfloatInterface
✔ [51/100] Built LeanRV64D.RiscvFdextRegs
✔ [52/100] Built LeanRV64D.RiscvSmcntrpmf
✔ [53/100] Built LeanRV64D.RiscvSysControl
✔ [54/100] Built LeanRV64D.RiscvInstRetire
✔ [55/100] Built LeanRV64D.RiscvPlatform
✔ [56/100] Built LeanRV64D.RiscvMem
✔ [57/100] Built LeanRV64D.RiscvVmemPte
✔ [58/100] Built LeanRV64D.RiscvVmemPtw
✔ [59/100] Built LeanRV64D.RiscvVmemTlb
⚠ [60/100] Built LeanRV64D.RiscvVmem
warning: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvVmem.lean:210:20: The `grind` tactic is experimental and still under development. Avoid using it in production projects.
✔ [61/100] Built LeanRV64D.RiscvTypesKext
✔ [62/100] Built LeanRV64D.RiscvZvkUtils
✔ [63/100] Built LeanRV64D.RiscvInstsBase
✔ [64/100] Built LeanRV64D.RiscvInstsAext
✔ [65/100] Built LeanRV64D.RiscvInstsMext
✔ [66/100] Built LeanRV64D.RiscvInstsZicsr
✔ [67/100] Built LeanRV64D.RiscvInstsFext
✔ [68/100] Built LeanRV64D.RiscvInstsDext
✔ [69/100] Built LeanRV64D.RiscvInstsZba
✔ [70/100] Built LeanRV64D.RiscvInstsZbb
✔ [71/100] Built LeanRV64D.RiscvInstsZbs
✔ [72/100] Built LeanRV64D.RiscvInstsZfh
✔ [73/100] Built LeanRV64D.RiscvInstsZfa
✔ [74/100] Built LeanRV64D.RiscvInstsZbkb
✔ [75/100] Built LeanRV64D.RiscvInstsZicond
✔ [76/100] Built LeanRV64D.RiscvInstsVextUtils
✔ [77/100] Built LeanRV64D.RiscvInstsVextFpUtils
✔ [78/100] Built LeanRV64D.RiscvInstsVextVset
✔ [79/100] Built LeanRV64D.RiscvInstsVextArith
✔ [80/100] Built LeanRV64D.RiscvInstsVextFp
✔ [81/100] Built LeanRV64D.RiscvInstsVextMem
✔ [82/100] Built LeanRV64D.RiscvInstsVextMask
✔ [83/100] Built LeanRV64D.RiscvInstsVextVm
✔ [84/100] Built LeanRV64D.RiscvInstsVextFpVm
✔ [85/100] Built LeanRV64D.RiscvInstsVextRed
✔ [86/100] Built LeanRV64D.RiscvInstsVextFpRed
✔ [87/100] Built LeanRV64D.RiscvInstsZicbom
✔ [88/100] Built LeanRV64D.RiscvInstsZicboz
✔ [89/100] Built LeanRV64D.RiscvInstsZvknhab
✖ [90/100] Building LeanRV64D.RiscvInstsEnd
trace: .> LEAN_PATH=/home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/.lake/build/lib/lean /home/runner/.elan/toolchains/leanprover--lean4-nightly---nightly-2025-04-07/bin/lean --tstack=400000 -Dweak.linter.style.nameCheck=false /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean -R /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D -o /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/.lake/build/lib/lean/LeanRV64D/RiscvInstsEnd.olean -i /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/.lake/build/lib/lean/LeanRV64D/RiscvInstsEnd.ilean -c /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/.lake/build/ir/LeanRV64D/RiscvInstsEnd.c --json
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63119:11: don't know how to synthesize implicit argument 'k_m'
  @vrev8 (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w) 8
    {
      toArray :=
        #[BitVec.setWidth
            (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[16]!,
          BitVec.setWidth
            (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[17]!,
          BitVec.setWidth
            (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[18]!,
          BitVec.setWidth
            (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[19]!,
          BitVec.setWidth
            (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[20]!,
          BitVec.setWidth
            (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[21]!,
          BitVec.setWidth
            (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[22]!,
          BitVec.setWidth
            (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[23]!],
      size_toArray := ⋯ }
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Nat
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @Vector.mk (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    8
    #[BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[16]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[17]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[18]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[19]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[20]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[21]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[22]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
    ⋯
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'a'
  @rfl Nat
    #[BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
          w[16]!,
        BitVec.setWidth
          (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[17]!,
        BitVec.setWidth
          (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[18]!,
        BitVec.setWidth
          (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[19]!,
        BitVec.setWidth
          (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[20]!,
        BitVec.setWidth
          (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[21]!,
        BitVec.setWidth
          (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8) w[22]!,
        BitVec.setWidth
          (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
          w[23]!].size
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Nat
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.toArray
    (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    [BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[16]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[17]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[18]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[19]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[20]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[21]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[22]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.cons (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    (BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
      w[16]!)
    [BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[17]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[18]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[19]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[20]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[21]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[22]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.cons (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    (BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
      w[17]!)
    [BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[18]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[19]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[20]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[21]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[22]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.cons (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    (BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
      w[18]!)
    [BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[19]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[20]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[21]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[22]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.cons (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    (BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
      w[19]!)
    [BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[20]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[21]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[22]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.cons (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    (BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
      w[20]!)
    [BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[21]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[22]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.cons (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    (BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
      w[21]!)
    [BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[22]!,
      BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.cons (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    (BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
      w[22]!)
    [BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
        w[23]!]
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.cons (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
    (BitVec.setWidth (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8)
      w[23]!)
    []
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63120:12: don't know how to synthesize implicit argument 'α'
  @List.nil (BitVec (?m.1075233 vs2 vs1 vd SEW LMUL_pow num_elem x✝¹ vs2_val vs1_val eg_len eg_start i r✝ x✝ w✝ w * 8))
context:
vs2 vs1 vd : vregidx
SEW LMUL_pow num_elem : Int
x✝¹ : PUnit
vs2_val vs1_val : Vector (BitVec SEW.toNat) num_elem.toNat
w✝² : Vector (BitVec 32) 24 := vectorInit zeros
eg_len eg_start : Int
loop_i_lower : Int := eg_start
loop_i_upper : Int := (fun x y => x - y) eg_len 1
loop_vars✝ : Vector (BitVec 32) 24 := w✝²
i : Int
r✝ : Vector (BitVec 32) 24
loop_vars : Vector (BitVec 32) 24 := r✝
w✝¹ : Vector (BitVec 32) 24 := loop_vars
x✝ : PUnit
w✝ w : Vector (BitVec 32) 24
⊢ Type
error: /home/runner/work/sail-riscv-lean/sail-riscv-lean/sail-riscv/build/model/Lean_RV64D/LeanRV64D/RiscvInstsEnd.lean:63146:66: application type mismatch
  get_velem_oct_vec vs2_val
argument
  vs2_val
has type
  Vector (BitVec SEW.toNat) num_elem.toNat : Type
but is expected to have type
  Vector (BitVec (?m.1089774 SEW LMUL_pow num_elem x✝¹ vs2_val vd_val eg_len eg_start i r✝ x✝ * 8))
    (?m.1089775 SEW LMUL_pow num_elem x✝¹ vs2_val vd_val eg_len eg_start i r✝ x✝) : Type
error: Lean exited with code 1
Some required builds logged failures:
- LeanRV64D.RiscvInstsEnd
